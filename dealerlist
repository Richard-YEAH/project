<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excel Search Program</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.19.1/xlsx.full.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        input, button {
            margin: 10px 0;
            padding: 10px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f4f4f4;
        }
    </style>
</head>
<body>
    <h1>Excel Search Program</h1>
    <label for="excelUrl">Excel File URL:</label>
    <input type="text" id="excelUrl" placeholder="Enter Excel File URL">
    <button onclick="loadExcel()">Load Excel</button><br>
    <label for="keyword">Enter Keyword:</label>
    <input type="text" id="keyword">
    <button onclick="searchKeyword()">Search</button>

    <table id="resultTable">
        <thead>
            <tr id="tableHeader"></tr>
        </thead>
        <tbody id="tableBody"></tbody>
    </table>

    <script>
        let excelData = [];

        // Function to load Excel file from URL
        async function loadExcel() {
            const url = document.getElementById('excelUrl').value.trim();
            if (!url) {
                alert('Please enter a valid URL!');
                return;
            }

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error('Failed to fetch the Excel file. Check the URL.');
                }

                const arrayBuffer = await response.arrayBuffer();
                const workbook = XLSX.read(arrayBuffer, { type: 'array' });
                const sheetName = workbook.SheetNames[0]; // Get the first sheet
                const worksheet = workbook.Sheets[sheetName];
                excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }); // Convert to array of arrays
                alert('Excel file loaded successfully!');
            } catch (error) {
                alert(`Error: ${error.message}`);
            }
        }

        // Function to search for the keyword
        function searchKeyword() {
            const keyword = document.getElementById('keyword').value.trim().toLowerCase();
            if (!keyword) {
                alert('Please enter a keyword!');
                return;
            }

            const tableHeader = document.getElementById('tableHeader');
            const tableBody = document.getElementById('tableBody');

            tableHeader.innerHTML = '';
            tableBody.innerHTML = '';

            if (excelData.length === 0) {
                alert('Please load an Excel file first!');
                return;
            }

            // Populate table header
            const headers = excelData[0];
            headers.forEach(header => {
                const th = document.createElement('th');
                th.textContent = header;
                tableHeader.appendChild(th);
            });

            // Search for the keyword in rows
            const results = excelData.slice(1).filter(row => row.some(cell => String(cell).toLowerCase().includes(keyword)));

            if (results.length === 0) {
                alert('No results found!');
                return;
            }

            // Populate table body with results
            results.forEach(row => {
                const tr = document.createElement('tr');
                row.forEach(cell => {
                    const td = document.createElement('td');
                    td.textContent = cell;
                    tr.appendChild(td);
                });
                tableBody.appendChild(tr);
            });
        }
    </script>
</body>
</html>
